{"version":3,"sources":["messenger.js","chat-window.js","chat-widget.js","App.js","serviceWorker.js","index.js"],"names":["Messenger","window","fbAsyncInit","FB","init","appId","autoLogAppEvents","xfbml","version","d","s","id","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","pageId","Component","appSetting","CometChat","AppSettingsBuilder","subscribePresenceForAllUsers","setRegion","build","then","console","log","error","apiKey","user","User","setName","createUser","login","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8RAqDeA,E,kLA9CPC,OAAOC,YAAc,WACnBC,GAAGC,KAAK,CACNC,MAAmB,kBACnBC,kBAAmB,EACnBC,OAAmB,EACnBC,QAAmB,UAoBxB,SAASC,EAAGC,EAAGC,GACd,IAAIC,EAAIC,EAAMJ,EAAEK,qBAAqBJ,GAAG,GACpCD,EAAEM,eAAeJ,MACrBC,EAAKH,EAAEO,cAAcN,IAAOC,GAAKA,EACjCC,EAAGK,IAAM,4CACTJ,EAAIK,WAAWC,aAAaP,EAAIC,IALjC,CAMCO,SAAU,SAAU,oB,+BAIpB,OAEI,kBAAC,IAAD,CACAC,OAAO,kBACPhB,MAAM,kBACNG,QAAQ,Y,GA1CIc,a,sBCIpBC,GAAa,IAAIC,YAAUC,oBAAqBC,+BAA+BC,UADtE,MACwFC,QACrGJ,YAAUpB,KAHE,kBAGUmB,GAAYM,MAChC,WACEC,QAAQC,IAAI,4CAGd,SAAAC,GACEF,QAAQC,IAAI,oCAAqCC,MAOrD,IAAIC,EAAS,2CAITC,EAAO,IAAIV,YAAUW,KAHf,SAKVD,EAAKE,QAJM,SAMXZ,YAAUa,WAAWH,EAAMD,GAAQJ,MAC/B,SAAAK,GACIJ,QAAQC,IAAI,eAAgBG,MAC9B,SAAAF,GACEF,QAAQC,IAAI,QAASC,MAQ7BR,YAAUc,MAHA,aAGWL,GAAQJ,MAC3B,SAAAK,GACEJ,QAAQC,IAAI,oBAAqB,CAAEG,YAErC,SAAAF,GACEF,QAAQC,IAAI,+BAAgC,CAAEC,aAKzBV,Y,oBChDAA,Y,gBCyBViB,E,uKApBX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,IAAD,CACEnB,OAAO,kBACPhB,MAAM,0B,GARAiB,aCIEmB,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASL,eAAe,SDyHpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLF,QAAQE,MAAMA,EAAMsB,c","file":"static/js/main.4817ae25.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport MessengerCustomerChat from 'react-messenger-customer-chat';\r\n\r\n/*global FB*/\r\n\r\nclass Messenger extends Component {\r\n    componentDidMount(){\r\n        window.fbAsyncInit = function() {\r\n          FB.init({\r\n            appId            : '203947964382425',\r\n            autoLogAppEvents : true,\r\n            xfbml            : true,\r\n            version          : 'v6.0'\r\n          });\r\n          \r\n          // FB.login(function(response) {\r\n          //   if (response.authResponse) {\r\n          //    console.log('Welcome!  Fetching your information.... ');\r\n          //    FB.api('/me', function(response) {\r\n          //      console.log('Good to see you, ' + response.name + '.');\r\n          //    });\r\n          //   } else {\r\n          //    console.log('User cancelled login or did not fully authorize.');\r\n          //   }\r\n          // });\r\n  \r\n          // FB.getLoginStatus(function(response) {\r\n          //   //this.statusChangeCallback(response);\r\n          // });\r\n          \r\n        };\r\n  \r\n      (function(d, s, id){\r\n        var js, fjs = d.getElementsByTagName(s)[0];\r\n        if (d.getElementById(id)) {return;}\r\n        js = d.createElement(s); js.id = id;\r\n        js.src = \"https://connect.facebook.net/en_US/sdk.js\";\r\n        fjs.parentNode.insertBefore(js, fjs);\r\n      }(document, 'script', 'facebook-jssdk'));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            /*My FB user ID: 2583673001903757 */\r\n            <MessengerCustomerChat\r\n            pageId=\"100902811579573\"\r\n            appId=\"203947964382425\"\r\n            version=\"6.0\"\r\n          />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Messenger;","import React, {Component} from 'react';\r\nimport {Launcher} from 'react-chat-window';\r\n\r\nimport { CometChat } from \"@cometchat-pro/chat\";\r\n\r\n/////initialize cometChat\r\n\r\nvar appID = \"162528093d8ef33\";\r\nvar region = \"us\";\r\nvar appSetting = new CometChat.AppSettingsBuilder().subscribePresenceForAllUsers().setRegion(region).build();\r\nCometChat.init(appID, appSetting).then(\r\n  () => {\r\n    console.log(\"Initialization completed successfully\");\r\n    // You can now call login function.\r\n  },\r\n  error => {\r\n    console.log(\"Initialization failed with error:\", error);\r\n    // Check the reason for error and take appropriate action.\r\n  }\r\n);\r\n\r\n////////create user\r\n\r\nlet apiKey = \"d9acdcf72ee2eef8fb5181a7403440902f7abb3f\";\r\nvar uid = \"user1\";\r\nvar name = \"Param\";\r\n\r\nvar user = new CometChat.User(uid);\r\n\r\nuser.setName(name);\r\n\r\nCometChat.createUser(user, apiKey).then(\r\n    user => {\r\n        console.log(\"user created\", user);\r\n    },error => {\r\n        console.log(\"error\", error);\r\n    }\r\n)\r\n\r\n/////////login\r\nvar UID = \"SUPERHERO1\";\r\n//var apiKey = \"API_KEY\";\r\n\r\nCometChat.login(UID, apiKey).then(\r\n  user => {\r\n    console.log(\"Login Successful:\", { user });    \r\n  },\r\n  error => {\r\n    console.log(\"Login failed with exception:\", { error });    \r\n  }\r\n);\r\n\r\n//class for react-chat-window\r\nclass ChatWindow extends Component {\r\n \r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      messageList: [],\r\n      newMessagesCount: 0,\r\n      isOpen: false,\r\n    };\r\n  }\r\n \r\n  _onMessageWasSent(message) {\r\n    this.setState({\r\n      messageList: [...this.state.messageList, message]\r\n    })\r\n    console.log(`New message`);\r\n  }\r\n \r\n  _onFilesSelected(fileList) {\r\n    const objectURL = window.URL.createObjectURL(fileList[0]);\r\n    this.setState({\r\n      messageList: [...this.state.messageList, {\r\n        type: 'file', author: 'me',\r\n        data: {\r\n          url: objectURL,\r\n          fileName: fileList[0].name\r\n        }\r\n      }]\r\n    });\r\n  }\r\n\r\n  _sendMessage(text) {\r\n    const newMessagesCount = this.state.isOpen ? this.state.newMessagesCount : this.state.newMessagesCount + 1;\r\n    if (text.length > 0) {\r\n      this.setState({\r\n        newMessagesCount: newMessagesCount,\r\n        messageList: [...this.state.messageList, {\r\n          author: 'them',\r\n          type: 'text',\r\n          data: { text }\r\n        }]\r\n      })\r\n      console.log(`New message: ${text}`);\r\n    }\r\n  }\r\n \r\n  _handleClick() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen,\r\n      newMessagesCount: 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n      <Launcher\r\n        agentProfile={{\r\n          teamName: 'react-chat-window-param',\r\n          imageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png'\r\n        }}\r\n        onMessageWasSent={this._onMessageWasSent.bind(this)}\r\n        onFilesSelected={this._onFilesSelected.bind(this)}\r\n        messageList={this.state.messageList}\r\n        newMessagesCount={this.state.newMessagesCount}\r\n        handleClick={this._handleClick.bind(this)}\r\n        isOpen={this.state.isOpen}\r\n        showEmoji\r\n      />\r\n      <form onSubmit={(e)=> {\r\n            e.preventDefault();\r\n            this._sendMessage(this.textArea.value);         //use _send message to reply to messages\r\n            this.textArea.value = '';\r\n        }}>\r\n        <div>Test the chat window by sending a message:</div>\r\n        <textarea\r\n            ref={(e) => { this.textArea = e; }}\r\n            className=\"demo-test-area--text\"\r\n            placeholder=\"Write a test message....\"\r\n        />\r\n        <button> Send Message! </button>\r\n    </form>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ChatWindow;","import React, { Component } from 'react';\r\nimport { Widget, addResponseMessage } from 'react-chat-widget';\r\n\r\nimport 'react-chat-widget/lib/styles.css';\r\n\r\nclass ChatWidget extends Component {\r\n    componentDidMount() {\r\n        addResponseMessage(\"Welcome to this awesome chat!\");\r\n    }\r\n\r\n    handleNewUserMessage = (newMessage) => {\r\n        console.log(`New message incoming! ${newMessage}`);\r\n        // Now send the message throught the backend API\r\n        addResponseMessage(\"How are you?\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Widget\r\n                handleNewUserMessage={this.handleNewUserMessage}\r\n                title=\"My new awesome title\"\r\n                subtitle=\"And my cool subtitle\"\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatWidget;","import React, { Component } from 'react';\nimport './App.css';\nimport CustomerChat from './messenger.js';\nimport ChatWindow from './chat-window.js';\nimport ChatWidget from './chat-widget.js';\nimport Messenger from './messenger.js'\nimport MessengerSendToMessenger from 'react-messenger-send-to-messenger';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Messenger />\n          <MessengerSendToMessenger \n            pageId=\"100902811579573\"\n            appId=\"203947964382425\"\n            />\n        </header>\n        {/* <CustomerChat /> */}\n        \n        {/* <ChatWindow />  */}\n\n        {/* <ChatWidget /> */}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}